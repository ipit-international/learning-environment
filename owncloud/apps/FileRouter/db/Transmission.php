<?php
/**
 * Created by PhpStorm.
 * User: SHARRISON
 * Date: 12/10/13
 * Time: 3:27 PM
 */

namespace OCA\FileRouter\Db;


use OC\Files\Cache\Shared_Cache;
use OC\Files\Filesystem;
use OC\Files\Storage\Shared;
use OCA\AppFramework\Db\Entity;
use OCA\FileRouter\IGATypes;
use OCA\FileRouter\TransmissionStates;
use OCP\Files;
use OCP\Share;
use OCP\Util;

class Transmission extends Entity
{

    /**
     * @var autogenerated ID for this transmission being tracked
     */
    public $id;

    /**
     * @var Owncloud file id generated for this transmission
     */
    public $fileid;

    /**
     * @var IGA Type that is in effect for this transmission (Model 1 Option 1, Model 1 Option 2, etc)
     */
    public $igatype;

    /**
     * @var State of this transmission (pending review, released, rejected, etc)
     */
    public $state;

    /**
     * @var User account (UID) that sent this transmission
     */
    public $sender;

    /**
     * @var Final destination (group) for this transmission
     */
    public $recipient;

    /**
     * @var [Optional] intermediate TA (group) that must review this transmission
     */
    public $intermediate;

    /**
     * @var Number of times this transmission has been downloaded
     */
    public $dl_count;

    /**
     * @var [Optional] Time To Expire - time that this transmission will be autoreleased,
     * i.e. the end of the time period for the TA user to review
     */
    public $ttoe;

    /**
     * @var Time To Delete - time that this transmission will be deleted
     */
    public $ttod;

    /**
     * @var full path to the file on the exchange server
     */
    public $fullpath;

    public function getStateLabel()
    {
        return TransmissionStates::getLabel($this->state);
    }

    public function getIgaTypeLabel()
    {
        return IGATypes::getLabel($this->igatype);
    }

    public function getFileName()
    {
        $name = $this->getFullpath();
        $tokens = explode('\\', $name);
        $tokens = explode('/', $tokens[count($tokens) - 1]);
        $last = $tokens[count($tokens) - 1];
        if (is_null($last) || strlen($last) == 0) {
            return 'N/A';
        }
        return $last;
    }

    public function getFileSize()
    {
        if (file_exists($this->getFullpath())) {
            $size = filesize($this->getFullpath());
            return sprintf('%s B', $size);
        }
        return 'N/A';
    }

    public function getFileTime()
    {
        if (file_exists($this->getFullpath())) {
            $time = filemtime($this->getFullpath());
            return date('o-m-d H:i:s e', $time);
        }
        return 'N/A';
    }
} 